# -*- coding: utf-8 -*-
"""ASIP_V2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SrZDMjR3XSAAgCjd-NVfokGH2-iGHi5K
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import cv2

def plot(data,centroids,belongs_to):
  data = pd.DataFrame({'X':data[:,:,0].ravel(),'Y':data[:,:,1].ravel(),'b':belongs_to.ravel()})
  centroids = pd.DataFrame({'X':[i[0] for i in centroids],'Y':[i[1] for i in centroids]})
  sns.scatterplot(data=data,x='X',y='Y',hue='b')
  sns.scatterplot(data=centroids,x='X',y='Y',color='red')
  plt.show()

def init_cent(k,data,r,c,bands):
  centroids = []
  cent_r = np.random.randint(0,r)
  cent_c = np.random.randint(0,c)
  centroids.append(data[cent_r,cent_c,:])
  l = 1
  for i in range(1,k):
    temp_cent = np.zeros((r,c,l))
    for j in range(l):
      z = np.sum(np.square(data-centroids[j].reshape(1,1,bands)),axis=2)
      temp_cent[:,:,j] = z
    temp_cent = np.min(temp_cent,axis=2)
    MAX = np.argmax(temp_cent)
    centroids.append(data[MAX//c,MAX%c,:])
    l += 1
  return centroids

def get_hidden_mat(distance_mat, k):
  distance_mat = 1/distance_mat
  return distance_mat/np.expand_dims(np.sum(distance_mat,axis=2),axis=2)
  
def k_means_1_iter(data, centroids, k, r, c, bands): 
  distance_mat = np.empty((r,c,k))
  i = 0
  for centroid in centroids:
    z = np.sum(np.square(data-centroid.reshape(1,1,bands)),axis=2)
    distance_mat[:,:,i] = z
    i += 1
  belongs_to = np.argmin(distance_mat,axis=2)
  return distance_mat, belongs_to

def update_centroid(data, belongs_to, k):
  centroids = []
  for i in range(k):
    z = np.where(belongs_to==i,1,0)
    centroid = np.sum(np.sum(data*np.expand_dims(z,axis=2),axis=0),axis=0)/np.sum(z)
    centroids.append(centroid)
  return centroids

def k_means(data, k):
  r,c,bands = data.shape
  centroids = init_cent(k,data,r,c,bands)
  # plot(data,centroid)
  while True:
    distance_mat, belongs_to = k_means_1_iter(data,centroids,k,r,c,bands)
    up_centroids = update_centroid(data,belongs_to,k)
    diff = 0
    for i in range(k):
      diff += np.linalg.norm(centroids[i]-up_centroids[i])
    # print(diff)
    centroids = up_centroids
    # print(centroids)
    if diff <= 10**-3:
      break 
  return get_hidden_mat(distance_mat,k),belongs_to,centroids

# hidden_mat, final_belongs_to, final_centroid = k_means(data,4)

# classified_B = np.where(final_belongs_to==3,255,0)
# classified_G = np.where(final_belongs_to==0,255,0)
# classified_R = np.where(final_belongs_to==1,255,0)
# classified_R = np.where(final_belongs_to==2,255,classified_R)
# classified_G = np.where(final_belongs_to==2,255,classified_G)
# classified_img = cv2.merge((classified_R, classified_G, classified_B))

# _, ax = plt.subplots(1,2,figsize=(25,25))
# ax[0].imshow(data)
# ax[1].imshow(classified_img)
# plt.show()

def r(a,b,Comp):
    res = Comp[a,b]
    return res

def q_s(Probs, i, j, i_n, j_n, label, Comp, k):
  res = 0
  for l in range(k):
    res += r(label,l,Comp)*Probs[i_n,j_n,l]
  return res/k

def Q_s(Probs, i, j, label, Comp, neigh, k):
  Q = 0
  x,y = Probs.shape[0], Probs.shape[1]
  center = neigh // 2
  for i_n in range(i-center,i+center+1):
      for j_n in range(j-center,j+center+1):
          if i_n>=0 and j_n>=0 and i_n<x and j_n<y:
            if i_n != i or j_n != j:
                Q += q_s(Probs,i,j,i_n,j_n,label,Comp,k)
  return Q/(neigh*neigh-1)

def P_s_next(Probs, i, j, Comp, neigh,k):
  temp = np.empty((k))
  for l in range(k):
    temp[l] = Q_s(Probs,i,j,l,Comp,neigh,k)* Probs[i,j,l]
  # temp[-1] = 1-np.sum(temp[0:-1]) 
  return temp/np.sum(temp)

def P(Probs, Comp, neigh, k):
  for i in range(Probs.shape[0]):
    for j in range(Probs.shape[1]):
      Probs[i,j,:] = P_s_next(Probs,i,j,Comp,neigh,k)
  return Probs

def relax(Probs, Comp, neigh, k, iterations):
  if neigh > Probs.shape[0] or neigh > Probs.shape[1]:
    raise Exception("the size is larger than the input matrix!")
  for i in range(iterations):
      Probs = P(Probs,Comp,neigh, k)
  return Probs

a = np.array([[1,2],[3,4]])
b = np.array([[1,3],[5,4]])
print(np.where(a==b,0,255))
